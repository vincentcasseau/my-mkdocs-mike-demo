{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"developers/HowToArray3/","title":"How to write universal array3 code","text":""},{"location":"developers/HowToArray3/#type-of-arrays","title":"Type of arrays","text":"<p>Arrays can be: - structured - unstructured:   - BE/ME   - NGON</p>"},{"location":"developers/HowToArray3/#in-place-functions","title":"In place functions","text":"<p>Use getFromArray3 to pass from python object to FldArrays:</p> <pre><code>PyObject* o;\nif (!PyArg_ParseTuple(args, \"O\", &amp;o)) return NULL;\nE_Int ni, nj, nk;\nK_FLD::FldArrayF* f; K_FLD::FldArrayI* c;\nchar* varString; char* eltType;\nE_Int ret = K_ARRAY::getFromArray3(o, varString, f, ni, nj, nk, c, eltType);\n</code></pre> <p>if ret = 1, it is a structured array if ret = 2, it is an unstructured array.</p> <p>Release memory. Dont forget at the end:</p> <pre><code>RELEASESHAREDB(ret, o, f, c);\n</code></pre> <p>Universal access on field size:</p> <pre><code>E_Int nfld = f-&gt;getNfld(); // nbre de champs\nE_Int npts = f-&gt;getSize(); // nbre de pts\n</code></pre> <p>Universal access on field pointers:</p> <pre><code>E_Float* x = f-&gt;begin(1); \nfor (E_Int i = 0; i &lt; 5; i++) printf(\" \" SF_F_ \" \", x[i]);\n// modification\nx[0] = -0.05;\n</code></pre> <p>Universal access on field with operator()</p> <pre><code>FldArrayF&amp; fr = (*f);\nfr(1, 1) = +0.05;\n</code></pre> <p>Universal access on NGON connectivity (ret=2, eltType=\"NGON\" or \"NGON*\"):</p> <pre><code>E_Int nfaces = c-&gt;getNFaces();\nE_Int nelts = c-&gt;getNElts();\n\nE_Int* ngon = c-&gt;getNGon();\nE_Int* nface = c-&gt;getNFace();\nE_Int* indPG = c-&gt;getIndPG(); // always exists, must be called\nE_Int* indPH = c-&gt;getIndPH();\n\n// Universal acces on face 0\nE_Int size;\nE_Int* face = c-&gt;getFace(0, size, ngon, indPG);\nprintf(\"face \" SF_D_ \":\", E_Int(0));\nfor (E_Int i = 0; i &lt; size; i++) printf(\" \" SF_D_ \" \", face[i]);\nprintf(\"\\n\");\n\n// Universal access on element 0\nE_Int* elt = c-&gt;getElt(0, size, nface, indPH);\nprintf(\"elt \" SF_D_ \":\", E_Int(0));\nfor (E_Int i = 0; i &lt; size; i++) printf(\" \" SF_D_ \" \", elt[i]);\nprintf(\"\\n\");\n</code></pre> <p>Universal access on NGON sizes (may be usefull for allocation):</p> <pre><code>E_Int sizeNGon = c-&gt;getSizeNGon(); // for NGONv3, contains face number and so is greater than for CGNSv4\nE_Int sizeNFace = c-&gt;getSizeNFace();\n</code></pre> <p>Universal access on BE/ME connectivity (ret=2, eltType=\"TRI\",\"QUAD\", \"TRI,QUAD\", \"TRI*\")</p> <pre><code>E_Int nc = c-&gt;getNConnect();\n// in case of BE, nc is 1\n\n// universal eltType split\nstd::vector&lt;char*&gt; eltTypes;\nK_ARRAY::extractVars(eltType, eltTypes);\n\n// access all connectivities\nfor (E_Int ic = 0; ic &lt; nc; ic++)\n{\n  FldArrayI&amp; cm = *(c-&gt;getConnect(ic));\n  E_Int nelts = cm.getSize(); // number of elements\n  E_Int nvpe = cm.getNfld(); // number of vertices by element\n  char* eltTypel = eltTypes[i]; // type of elements\n\n  for (E_Int i = 0; i &lt; nelts; i++)\n  {\n    cm(i,1) = 1; cm(i,2) = 2; cm(i,3) = 3; // dont use begin on connects\n  }\n}\n\n// delete eltType split\nfor (size_t i = 0; i &lt; eltTypes.size(); i++) delete [] eltTypes[i];\n</code></pre> <p>Getting array api (internal storage information, rare usage):</p> <pre><code>E_Int apif = f-&gt;getApi();\n</code></pre> <p>if apif=1, it is an array1 if apif=2, it is an array2 or an array3 For structured array, there is no difference between array2 and array3.</p> <p>For NGONs:</p> <pre><code>E_Int isNGon = c-&gt;isNGon();\n// isNGon=1: NGON, NFACE CGNSv3 array1 compact\n// isNGON=2: NGON, NFACE, [indPG], [indPF] rake CGNSv3\n// isNGON=3: NGON, NFACE, indPG, indPF rake CGNSv4\n</code></pre>"},{"location":"developers/HowToArray3/#create-new-array","title":"Create new array","text":"<p>Build empty arrays. Pass an api arg in your function.</p> <p>Structured:</p> <pre><code>PyObject* tpl = K_ARRAY::buildArray3(3, \"x,y,z\", ni, nj, nk, api);\n</code></pre> <p>Then get pointers to fill values:</p> <pre><code>K_ARRAY::getFromArray3(tpl, f);\n</code></pre> <p>BE:</p> <pre><code>PyObject* tpl = K_ARRAY::buildArray3(3, \"x,y,z\", npts, ncells, \n                                     eltType, false, api);\n</code></pre> <p>Then get pointers to fill values:</p> <pre><code>K_ARRAY::getFromArray3(tpl, f, cn);\n</code></pre> <p>ME:</p> <pre><code>PyObject* K_ARRAY::buildArray3(3, \"x,y,z\", npts,\n                               std::vector&lt;E_Int&gt;&amp; neltsPerConnect,\n                               \"TRI,QUAD\", false, api)\n</code></pre> <p>NGON:</p> <pre><code>PyObject* K_ARRAY::buildArray3(3, \"x,y,z\", npts, ncells, nfaces,\n                              \"NGON\", sizeNGon, sizeNFace, ngonType,\n                              false, api);\n</code></pre>"},{"location":"developers/HowToArray3/#copy-functions","title":"Copy functions","text":"<p>If input is api=1, build api=1 else build api=3.</p> <p>Structured: build identical array to f. Varstring can change. If api=-1, use input api.</p> <pre><code>PyObject* K_ARRAY::buildArray3(f, \"x,y,z\",\n                               ni, nj, nk, api=-1)\n</code></pre> <p>BE/ME/NGON: build identical array to f and cn. Varstring can change. If api=-1, use input api.</p> <pre><code>PyObject* K_ARRAY::buildArray3(f, \"x,y,z\", varString, cn,\n                               \"TRI\", api=-1)\n</code></pre>"},{"location":"developers/guide4devs/","title":"For developers:","text":""},{"location":"developers/guide4devs/#editor","title":"Editor:","text":"<ul> <li>indent with spaces (2 or 4 depending on file complexity). Dont use tabs.</li> <li>use utf8/lf encoding</li> <li>respect typo for commas: <code>t1, t2, a3</code>.</li> <li>respect type for two points: <code>a:</code></li> </ul>"},{"location":"developers/guide4devs/#python-functions","title":"Python Functions:","text":"<ul> <li>no snake (my_function) in function names or arguments. Use Camel (myFunction).</li> <li>short comment string in function header</li> <li>function must have a test before commit</li> <li>in place function starts with <code>_</code> and return None</li> <li>internal functions ends with <code>__</code></li> <li>function must have a copyRef counterpart that calls in place function</li> <li>no IO in function (must work on input t and return t or a copy of t)</li> <li>try to unify argument names with existing functions</li> <li>complexifying an existing function, ie adding an argument or modifying the meaning of an argument, must be discussed</li> <li>check that a function performs correctly on <code>FlowSolutionNodes</code>, <code>FlowSolution#Centers</code>, <code>ZoneBC</code> and <code>ZoneGridConnectivity</code></li> <li>if a function is fully operational, write the doc</li> <li>always run validCassiopee in full against the global test database before commit</li> </ul>"},{"location":"developers/guide4devs/#tests","title":"Tests:","text":"<ul> <li>no snake in test file name.</li> <li>first line of test shoud be <code># - functionName (pyTree) -</code></li> <li>seq tests finishes by _t1, _t2.</li> <li>parallel test finishes by _m1, _m2 and are run on 2 procs.</li> <li>in tests, dont use input files, create the test case in the script.</li> <li>a test must run in less than 10 seconds (ideally 1 sec).</li> </ul>"},{"location":"developers/guide4devs/#openmp","title":"OpenMP:","text":"<ul> <li>for computationally intensive loops, use omp parallelisation wherever possible. For example:</li> </ul> <pre><code>#pragma omp parallel\n{\n    E_Int localInt;\n    E_Float localFloat;\n    #pragma omp for\n    for (E_Int i = 0; i &lt; ncells; i++)\n    {\n        localInt = i;\n        localFloat = 12./i;\n       /* ... */\n    }\n}\n</code></pre> <ul> <li>the <code>pragma omp parallel</code> clause creates threads and has a slight cost: group <code>pragma omp for</code> clauses within its scope if possible.</li> <li>the <code>pragma omp for</code> clause splits the for loop into equal chunks</li> <li>in more complex cases, you can get the thread id and number of threads as:</li> </ul> <pre><code>#pragma omp parallel\n{\n  E_Int ithread = __CURRENT_THREAD__;\n  E_Int numThreads = __NUMTHREADS__; \n  /* ... */\n}\n</code></pre>"},{"location":"developers/makingMovies/","title":"Making movies","text":""},{"location":"developers/makingMovies/#creating-mp4-from-images","title":"Creating mp4 from images","text":"<pre><code>  ffmpeg -framerate 20 -pattern_type glob -i \"*.png\" -b:v 50000k video.mp4\n</code></pre> <p>or</p> <pre><code>  ffmpeg -framerate 20 -i image%02d.png -b:v 50000k video.mp4\n</code></pre>"},{"location":"developers/makingMovies/#adding-metadata-for-360-mp4","title":"Adding metadata for 360 mp4","text":"<pre><code>  exiftool -XMP-GSpherical:Spherical=\"true\" video.mp4\n</code></pre>"},{"location":"developers/Docker/UsingDocker/","title":"Running Cassiopee in a Docker container","text":""},{"location":"developers/Docker/UsingDocker/#1-installing-docker-and-its-dependencies","title":"1. Installing Docker and its dependencies","text":"<ul> <li>Dependencies:</li> </ul> <pre><code>sudo apt install apt-transport-https ca-certificates curl software-properties-common\n</code></pre> <ul> <li>Docker:</li> </ul> <pre><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt update &amp;&amp; apt install docker-ce -y\nsudo systemctl status docker\n</code></pre> <ul> <li>Configure Docker:</li> </ul> <pre><code>sudo usermod -aG docker ${USER}\ngroups ${USER}\n</code></pre>"},{"location":"developers/Docker/UsingDocker/#2-pulling-from-dockerhub","title":"2. Pulling from DockerHub","text":"<ul> <li>Please pull the official image of Cassiopee from DockerHub </li> </ul> <pre><code>docker pull cassiopee486/cassiopee:&lt;tag&gt;\n</code></pre> <p>where tag is a version tag such as <code>v4.0b</code> (in the remainder of these notes, <code>v4.0b</code> is used). Available tags, from <code>v4.0b</code> onwards, are recalled on this page.</p> <ul> <li>Verify that the image is now present in the list of downloaded images</li> </ul> <pre><code>docker images\n</code></pre> <p></p>"},{"location":"developers/Docker/UsingDocker/#3-running-a-container","title":"3. Running a container","text":"<ul> <li>The Cassiopee container can be run interactively for version <code>v4.0b</code> like so</li> </ul> <pre><code>xhost +local:docker\ndocker run -it --rm --network=host --privileged --volume=\"$HOME/.Xauthority:/root/.Xauthority:rw\" -v /tmp/.X11-unix:/tmp/.X11-unix -v /dev/dri:/dev/dri -e DISPLAY=unix$DISPLAY cassiopee486/cassiopee:v4.0b\n</code></pre> <p>and the instance of the container will be removed after it execution thanks to <code>--rm</code>. Note that none of the modifications you may have made in the container will persist. Please consider using volumes or bind mounts if this is something you may benefit from. An example is given below for a bind mount with read and write permissions using the command-line flag <code>-v /home/user/git/io:/io</code>, where the local folder <code>/home/user/git/io</code> is mapped to the <code>/io</code> folder in the container</p> <pre><code>xhost +local:docker\ndocker run -it --rm --network=host --privileged --volume=\"$HOME/.Xauthority:/root/.Xauthority:rw\" -v /tmp/.X11-unix:/tmp/.X11-unix -v /dev/dri:/dev/dri -v /home/user/git/io:/io -e DISPLAY=unix$DISPLAY cassiopee486/cassiopee:v4.0b\n</code></pre> <ul> <li>After execution, feel free to check the list of running instances (it should be none)</li> </ul> <pre><code>docker ps -a\n</code></pre> <p></p>"},{"location":"developers/Docker/UsingDocker/#4-deleting-a-docker-image","title":"4. Deleting a Docker image","text":"<p>To delete an outdated docker image, first list all existing images, copy the hash of the image you would like to delete and remove from hash as</p> <pre><code>docker images\ndocker rmi &lt;imageHash&gt;\n</code></pre>"},{"location":"developers/Git/GitShortcuts/","title":"Useful git shortcuts","text":""},{"location":"developers/Git/GitShortcuts/#detailed-compact-display-of-git-log-with-graph","title":"Detailed &amp; compact display of git log with graph","text":"<pre><code>alias gitlog=\"git log --all --graph --pretty=format:'%C(auto)%d%Creset %C(Yellow) %h %Creset|| %C(Cyan) %as %Creset || %C(dim magenta) %an %Creset|| %s'\"\n</code></pre> <p>See below for an example of the output of the above command:</p> <p></p>"},{"location":"developers/Git/GitShortcuts/#add-branch-detail-to-working-path-directory-in-case-of-multiple-branches","title":"Add branch detail to working path directory - in case of multiple branches","text":"<p>To be placed in the environment script &amp; to be sourced</p> <pre><code>blackcolprompt='\\[\\033[30m\\]'\npurplecolprompt='\\[\\033[35m\\]'\n\nPS1='`if [ \\$? = 0 ]; then echo \\[\\033[01\\;32m\\] ; else echo \\[\\033[01\\;31m\\]; fi`\\u@\\h\\[\\033[01;34m\\] \\w$(\n  gitinfo=\"$(git branch 2&gt;/dev/null | grep \"^*\" | cut -c3-)\";\n  if [ \"$gitinfo\" ]\n  then\n    printf '$purplecolprompt'@\"$gitinfo\"'$redcolprompt'\n  fi\n  ) \\$\\[\\033[00m\\]'\n</code></pre> <p>The above command adds the '@main' seen below:</p> <p></p>"},{"location":"developers/Git/GitShortcuts/#git-grep-with-line-number","title":"Git grep with line number","text":"<p>Git grep with line number for (1) a single variable or (2) a single variable in a specific working directory. The latter automatically ignores the */test directory and ignores the .rst files.</p> <p>e.g.  1) gitgrep var2 2) gitgrep var 2 Converter</p> <pre><code># first argument: variable names\n# second argument: local path to directory\ngitgrep () {\n    if [ \"$#\" -lt 2 ]\n    then\n    echo git grep -n \"$1\";\n    git grep -n \"$1\";\n    elif [ \"$#\" -lt 3 ]\n    then\n    echo git grep -n \"$1\" -- ':!'\"$2\"'/test/*'  ':!*.rst' \"$2\";\n    git grep -n \"$1\" -- ':!'\"$2\"'/test/*'  ':!*.rst' \"$2\";\n    else\n    echo \"gitgrep can only take a max of 2 arguments\"\n    fi\n}\n</code></pre>"},{"location":"developers/Git/cloningCassiopee/","title":"Cloning Cassiopee","text":""},{"location":"developers/Git/cloningCassiopee/#add-an-ssh-key-to-your-github-account","title":"Add an SSH key to your Github account","text":"<ol> <li>Start the SSH agent    </li> </ol> <pre><code>eval `ssh-agent -s`\n</code></pre> <ol> <li>Create a new SSH key (no passphrase, add a meaningful suffix to the key) and add it to the SSH agent</li> </ol> <pre><code>ssh-keygen -t ed25519 -C &lt;firstname.name@example.com&gt;\nssh-add &lt;full path to the private key (id_edXXXXX)&gt;\n</code></pre> <ol> <li>Copy the contents of the public key (id_edXXXXX.pub) to your online Github account</li> </ol> <pre><code>cat &lt;full path to the public key&gt;\n</code></pre> <p>Go to github.com/\\, click on your profile in the top right-hand corner, thenSettings &gt; Access &gt; SSH and GPG keys &gt; New SSH key and paste it in the text box. <ol> <li>Set up your github account in a terminal window</li> </ol> <pre><code>git config --global user.name &lt;username&gt;\ngit config --global user.email &lt;firstname.name@example.com&gt;\n</code></pre>"},{"location":"developers/Git/cloningCassiopee/#clone-or-fork-cassiopee","title":"Clone or Fork Cassiopee","text":"<ol> <li>If you are not planning on making any modifications to the source code, then you can clone the <code>main</code> branch of the Cassiopee repository. Change directory to where you'd like the Cassiopee Github repository to be and type:</li> </ol> <pre><code>git clone --branch main --single-branch git@github.com:onera/Cassiopee.git\n</code></pre> <ol> <li>To contribute to the Github repository instead, please consider creating a fork first: on the github repo, click on the Fork button followed by Create new fork. Then, you can clone the <code>dev</code> branch of your Fork as:</li> </ol> <pre><code>git clone git@github.com:&lt;github_username&gt;/Cassiopee.git\n</code></pre> <p>The alias <code>origin</code> that is defined on your machine is pointing to your remote fork repository. Let's add another shortname called <code>upstream</code> to store the URL of the upstream/official repository:</p> <pre><code>cd Cassiopee\ngit remote -v\ngit remote add upstream git@github.com:onera/Cassiopee.git\ngit remote -v\n</code></pre> <p>The next time you will want to synchronise your fork from the command line, please type</p> <pre><code>git status # make sure you have no local changes\ngit pull upstream dev\ngit push\n</code></pre> <p>If you have local changes that you would wish to commit and push after synchronising your fork and local / working directories, please stash them as explained here.</p>"},{"location":"developers/Git/cloningCassiopee/#install-cassiopee","title":"Install Cassiopee","text":"<p>To install Cassiopee, please visit one of these Installation pages: - Windows - Ubuntu</p>"},{"location":"developers/Git/contributing/","title":"Contributing to the Cassiopee Github repository","text":""},{"location":"developers/Git/contributing/#tldr","title":"TLDR","text":"<p>To contribute, you need to create a <code>Pull Request</code> from your remote fork webpage: https://github.com/github_username/Cassiopee/. Click on the Contribute button and follow the instructions (give a title to your PR, describe the modifications and review your changes)</p> <p> </p>"},{"location":"developers/Git/contributing/#forking-the-upstream-repository","title":"Forking the upstream repository","text":"<ul> <li>To create your own fork of Cassiopee, please read this section </li> </ul>"},{"location":"developers/Git/contributing/#synchronising-your-fork-from-the-dev-branch-of-the-upstream-repository","title":"Synchronising your fork from the dev branch of the upstream repository","text":"<ul> <li> <p>From your remote fork webpage (https://github.com/github_username/Cassiopee/), click on the Sync fork button</p> </li> <li> <p>From a terminal window, follow the instructions given at the end of this paragraph</p> </li> </ul> <p> </p>"},{"location":"developers/Git/contributing/#stashing","title":"Stashing","text":"<p>Pulling updates will fail if you have local changes. You can first check the state of your local/working directories with</p> <pre><code>git status\n</code></pre> <p>and if anything is listed, please consider stashing it (ie, saving it). Below is a cheat sheet on stashing</p> <pre><code>git stash list  # list all stashes in antichronological order of insertion in the stashing stack\n\ngit stash push -m \"stashing message to help you remember what this stash is about\"  # save your local changes in your local stashing stack\n\ngit stash apply stash@{stash_id}  # reinstate the modifications saved in `stash_id` in your working directory. stash_id 0 is the most recent.\n\ngit stash drop stash@{stash_id}  # delete stash stash_id - other stashes may be reindexed\n\ngit stash pop stash@{stash_id}  # combine git stash apply and git stash drop in one command\n</code></pre> <p> </p>"},{"location":"developers/Git/contributing/#synchronising-your-local-and-working-directories-from-your-remote-fork","title":"Synchronising your local and working directories from your remote fork","text":"<p>To synchronise your local directory only:</p> <pre><code>git fetch origin dev\n</code></pre> <p>To synchronise your working directory from your local directory:</p> <pre><code>git merge\n</code></pre> <p>To synchronise both directories at once:</p> <pre><code>git pull origin dev\n</code></pre> <p> </p>"},{"location":"developers/Git/contributing/#synchronising-your-local-and-working-directories-and-your-remote-fork-from-the-upstream-repo","title":"Synchronising your local and working directories, and your remote fork, from the upstream repo","text":"<pre><code>git pull upstream dev\ngit push origin dev\n</code></pre>"},{"location":"developers/Git/contributing/#committing-and-pushing-to-your-remote-fork","title":"Committing and pushing to your remote fork","text":"<ol> <li>Committing will commit your local modifications to your local directory from your working directory.  First inspect the files that are modified:</li> </ol> <pre><code>git status\n</code></pre> <p>To see the differences, run:</p> <pre><code>git diff &lt;file&gt;\n</code></pre> <p>or if you'd wish to use a diff tool instead such as <code>meld</code>, type the following command just once</p> <pre><code>git config --global diff.tool meld\ngit config --global --add difftool.prompt false\n</code></pre> <p>Then, inspect a file using</p> <pre><code>git difftool &lt;file&gt;\n</code></pre> <p>or all changes in the root directory with <code>meld</code></p> <pre><code>meld $CASSIOPEE\n</code></pre> <ol> <li>You can then add files and/or folders</li> </ol> <pre><code>git add &lt;file1&gt; &lt;file2&gt; &lt;folder1&gt; &lt;file3&gt;\n</code></pre> <p>or add all modified files/folders to your future commit:</p> <pre><code>git add -u\n</code></pre> <p>You are now ready to commit to your local repo - provide a meaningful description of the changes:</p> <pre><code>git commit -m \"Module name: message\"\n</code></pre> <ol> <li>Pushing will udpate your remote fork  </li> </ol> <pre><code>git push\n</code></pre> <p> </p>"},{"location":"developers/Git/contributing/#submitting-changes-to-the-upstream-repository","title":"Submitting changes to the upstream repository","text":"<p>Finally, to propose your modifications to the <code>dev</code> branch of the upstream/official repository, you have to  create a Pull Request. Go to the webpage of your remote fork: https://github.com/github_username/Cassiopee/, click on the Contribute button and follow the instructions (give a title to your PR, describe the modifications and review your changes).</p>"},{"location":"developers/Install/msys2/","title":"Installation on windows (using msys2)","text":""},{"location":"developers/Install/msys2/#install-msys2","title":"Install msys2","text":"<p>Download msys2 (https://www.msys2.org) and install it.</p>"},{"location":"developers/Install/msys2/#install-dependencies","title":"Install dependencies","text":"<p>In an msys2 mingw64 terminal:</p> <pre><code>pacman -S mingw64/mingw-w64-x86_64-gcc\npacman -S mingw64/mingw-w64-x86_64-gcc-fortran\npacman -S mingw64/mingw-w64-x86_64-python\npacman -S mingw64/mingw-w64-x86_64-python-numpy\npacman -S mingw64/mingw-w64-x86_64-scons\npacman -S mingw64/mingw-w64-x86_64-python-pip\npacman -S mingw64/mingw-w64-x86_64-python-pip-tools\npacman -S mingw64/mingw-w64-x86_64-hdf5\npacman -S mingw64/mingw-w64-x86_64-msmpi\npacman -S mingw64/mingw-w64-x86_64-oce\n</code></pre>"},{"location":"developers/Install/msys2/#install-cassiopee","title":"Install Cassiopee","text":"<pre><code>export CASSIOPEE=/d/johndo/Cassiopee\nexport MACHINE=msys2\n\nsource $CASSIOPEE/Cassiopee/Envs/sh_Cassiopee_r8\ncd $CASSIOPEE/Cassiopee\n./install\n</code></pre>"},{"location":"developers/Install/msys2/#some-usefull-pacman-commands","title":"Some usefull pacman commands","text":"<p>Update system:</p> <pre><code>pacman -Syu\n</code></pre> <p>Find package matching keyword:</p> <pre><code>pacman -Ss &lt;keyword&gt;\n</code></pre> <p>Install package:</p> <pre><code>pacman -S &lt;package&gt;\n</code></pre> <p>List installed packages:</p> <pre><code>pacman -Qe\n</code></pre> <p>Remove package:</p> <pre><code>pacman -Rs &lt;package&gt;\n</code></pre>"},{"location":"developers/Install/ubuntu/","title":"Installation on linux (ubuntu)","text":"<p>Tested on ubuntu 24.04.</p>"},{"location":"developers/Install/ubuntu/#install-dependencies","title":"Install dependencies","text":"<pre><code>sudo apt-get install python3-dev\nsudo apt-get install python3-numpy\nsudo apt-get install python3-distutils-extra\nsudo apt-get install pip\nsudo apt-get install scons\nsudo apt-get install gcc\nsudo apt-get install g++\nsudo apt-get install gfortran\n\nsudo apt-get install libopenmpi-dev\nsudo apt-get install python3-mpi4py\nsudo apt-get install libhdf5-openmpi-dev\n\nsudo apt-get install python3-tk\nsudo apt-get install libglu1-mesa-dev\nsudo apt-get install mesa-common-dev\nsudo apt-get install libosmesa6-dev\nsudo apt-get install xorg-dev\n\nsudo apt-get install libocct-foundation-dev\nsudo apt-get install libocct-modeling-algorithms-dev\nsudo apt-get install libocct-data-exchange-dev\nsudo apt-get install libocct-modeling-data-dev\nsudo apt-get install libocct-draw-dev\n\n</code></pre>"},{"location":"developers/Install/ubuntu/#install-cassiopee","title":"Install Cassiopee","text":"<pre><code>export CASSIOPEE=/d/johndo/Cassiopee\nexport MACHINE=ubuntu\n\nsource $CASSIOPEE/Cassiopee/Envs/sh_Cassiopee_r8\ncd $CASSIOPEE/Cassiopee\n./install\n</code></pre>"},{"location":"developers/Install/ubuntu/#more-apt-get-commands","title":"More apt-get commands","text":"<p>Find package from keyword:</p> <pre><code>apt-cache search &lt;keyword&gt;\n</code></pre> <p>Install package:</p> <pre><code>sudo apt-get install &lt;package&gt;\n</code></pre> <p>Remove package:</p> <pre><code>sudo apt-get remove &lt;package&gt;\n</code></pre>"}]}